Given an array of sorted integers. The task is to find the closest value to the given number in array. Array may contain duplicate values.

Note: If the difference is same for two values print the value which is greater than the given number.

Example 1:

Input : Arr[] = {1, 3, 6, 7} and K = 4
Output : 3
Explanation:
We have an array [1, 3, 6, 7] and target is 4. if we look at the absolute difference of target with every element of an array we will get [ |1-4|, |3-4|, |6-4|, |7-4| ]. So, the closest number is 3.

//Code :
//{ Driver Code Starts
//Initial Template for Java

/*package whatever //do not write package name here */

import java.io.*;
import java.util.*;


class GFG {
	public static void main (String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		int testcases = Integer.parseInt(br.readLine());

		while(testcases-- > 0){

		    String line1 = br.readLine();
		    String []element = line1.trim().split(" ");
		    int n = Integer.parseInt(element[0]);
		    int target = Integer.parseInt(element[1]);

		    int arr[] = new int[n];

		    String line = br.readLine();
		    String[] elements = line.trim().split(" ");

		    for(int index = 0;index < n; index++){
		        arr[index] = Integer.parseInt(elements[index]);
		    }
		    Solution obj = new Solution();
		    System.out.println(obj.findClosest(arr, n, target));       
		}	
	}
}
// } Driver Code Ends


//User function Template for Java

class Solution{

    public static int findClosest(int arr[], int n, int target) 
    { 
        // Complete the function
        int t=-1;
        int ans=Integer.MAX_VALUE;
        for(int i=0;i<n;i++){
            if(ans>=Math.abs(arr[i]-target)){
                ans=Math.abs(arr[i]-target);
                t=arr[i];
            }
        }
        return t;
    } 
}

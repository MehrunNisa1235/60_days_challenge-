Given an array of size n which contains all elements occurring in multiples of K, except one element which doesn't occur in multiple of K. Find that unique element.

Example 1:

Input : 
n = 7, k = 3
arr[] = {6, 2, 5, 2, 2, 6, 6}
Output : 
5
Explanation:
Every element appears 3 times except 5.

//Code :


//{ Driver Code Starts
//Initial Template for Java

import java.util.*;
import java.lang.*;
import java.io.*;


class GFG {
	public static void main(String[] args) throws IOException
	{
	    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine().trim()); // Inputting the testcases
        while(t-->0)
        {
            StringTokenizer stt = new StringTokenizer(br.readLine());

            int n = Integer.parseInt(stt.nextToken());
            int k = Integer.parseInt(stt.nextToken());

            int a[] = new int[(int)(n)];
            String inputLine[] = br.readLine().trim().split(" ");
            for (int i = 0; i < n; i++) {
                a[i] = Integer.parseInt(inputLine[i]);
            }

            Solution obj = new Solution();
            System.out.println(obj.findUnique(a, n, k));

        }
	}
}

// } Driver Code Ends


//User function Template for Java

class Solution {

    public int findUnique(int a[], int n, int k)
    {
        HashMap<Integer,Integer> hm=new HashMap<>();
        for(int i=0;i<n;i++){
            if(hm.containsKey(a[i])){
                hm.put(a[i],hm.get(a[i])+1);
            }else{
                hm.put(a[i],1);
            }
        }
        for(int x : hm.keySet()){
            if(hm.get(x)%k!=0){
                return x;
            }
        }
        return -1;
    }
}
